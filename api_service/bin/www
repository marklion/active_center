#!/usr/bin/env node

/**
 * 项目启动，连接数据库，监听端口
 * Module dependencies.
 */
//build dir if needed
dirInit('../logs', '../public/upload', '../models');

const mongoose = require('mongoose');
const Grid = require('gridfs-stream');
const bluebird = require('bluebird');
const config = require('config');
const log = require('../lib/log').get(config.logger);
const httpResult = require('../lib/httpResult');
const cacheService = require('../services/cache');

const mongoOptions = {
  // reconnectTries: Number.MAX_VALUE, // Never stop trying to reconnect
  // reconnectInterval: 3000, // Reconnect every 3000ms
  poolSize: 20, // Maintain up to 20 socket connections
  // If not connected, return errors immediately rather than waiting for reconnect
  bufferMaxEntries: 0,
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex : true
};

mongoose.connect(process.env.MONGO_URL, mongoOptions);
// mongoose.connect(config.db.mongo.url, mongoOptions);
mongoose.Promise = bluebird;
mongoose.set('useFindAndModify', false);
const mongodb = mongoose.connection;

global._ = require('lodash');
global.constant = require('../constant');
global.models = require('./load_models');
global.mongodb = mongodb;
global.log = log;
global.httpResult = httpResult;
global.appCache = {
  visibleClubs : {},
  getClubQueryCondition : function(clubId){
    let clubs = appCache.visibleClubs[clubId];
    if(clubs && clubs.length === 1){
      return {club : clubs[0]};
    }else{
      return {club : {$in : clubs}}
    }
  },
  canEditClub : function(yourClubId, editClubId){
    let clubs = appCache.visibleClubs[yourClubId];
    return yourClubId != editClubId && clubs && clubs.includes(editClubId)
  }
};

mongodb.on('error', console.error.bind(console, 'connection error:'));

mongodb.once('open', async () => {
  // we're connected!
  log.info(`=====> db connected :${process.env.MONGO_URL}`);
  global.gfs = Grid(mongodb.db, mongoose.mongo);
  gfs.collection('media');

  await dbInit();
  log.info(`=====> db init finished`);

  await cacheInit();
  log.info(`=====> app cache init finished`);

  let app = require('../app');
  let port = normalizePort(config.port);
  app.listen(port);
  log.info(`=====> listen port on ${port}`);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
/**
 * 初始化必要的目录
 */
function dirInit() {
  const shell = require('shelljs');
  for(let index in arguments){
    arguments[index] = __dirname + '/' + arguments[index];
    shell.mkdir('-p', arguments[index]);
  }
}

async function dbInit(){
  try{
    // await models.club.remove({});
    // await models.role.remove({});
    // await models.user.remove({});

    //这个init 最好在实际使用的时候去掉，万一代码泄漏，超级管理员账户就丢失了。
    let sClub = await models.club.findOne({name : 'root'});
    if(!sClub){
      sClub = await models.club.create({
        name : 'root',
      });
    }

    let sr = await models.role.findOne({name: 'root'});
    if(!sr){
      sr = await models.role.create({
        name : 'root',
        type : constant.ROLE_TYPE.SUPER_ADMIN,
        club : sClub._id,
        menus : [],
        editable : false,
        create_time : new Date(),
      });
    }
    let sa = await models.user.findOne({account : 'zcadmin'});
    if(!sa){
      await models.user.create({
        account: 'zcadmin',
        pwd: 'zcadmin',
        name: '超级管理员',
        mobile: '13401175123',
        role: sr._id,
        club : sClub._id,
        privilege : [],
        system : 1
      });
    }
  }catch(err){
    log.error(err);
  }
}

async function cacheInit(){
  await cacheService.refreshClubCache();
}
